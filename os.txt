

                          CPU signatures for OS identification
                          ------------------------------------
                          
[ why?

 A function like this could be useful for many purposes but admittedly, 
the motivation for me was in writing a piece of code that could execute 
a command across many different operating systems running on x86 CPUs. 

Initially, the checks were based on differences in stack pointer, 
segment registers, REX prefixes (to identify CPU mode) and system calls. 

After testing many systems, there were too many variables involved to 
accurately identify OS based on IF/ELSE statements with more and more 
OS being tested and results being gathered.

The solution was simply to generate signatures but it couldn't simply 
be just the contents of segment registers, stack pointers and error 
codes returned by system calls. There had to be additional checks to 
make the signature more reliable, more unique.

That's what I talk about here.



[ talk about GDT here]

[ generating signatures

Each segment is part of the buffer we'll use,



  1] Acquire value of each segment (cs,ds,es,fs,gs,ss)
  2] Acquire stack pointer
  3] Execute system call where applicable
  4]
  
[ Segment registers

Each contain a number of bits which with up to 6 registers can account
Segment registers can hold 16-bit values but normally only have 8.
However, there are times when it only has 4-bits or as much as 12-bits.


Test for nibble and set 1 bit, then shift 4 bits, repeating until all 16-bits are complete

[ System calls

x86 system calls are executed through interrupt 0x80 for Linux/BSD/OSX but on Solaris, they use 0x91
Solaris can be detected by shifting GS right by 8 bits and checking if it resulted in zero flag.
if not, we assume being solaris but of course, this was only tested with latest version.


  
  ; --------------------------------
  OS       : Windows NT x32
  Binary   : 32-bit
  Segments : cs=0x1B ds=0x23 es=0x23
  Segments : fs=0x38 gs=0x00 ss=0x23

  Stack Ptr: 0x0022FEF4
  Syscall E: 0x00000000

  ; --------------------------------
  OS       : Windows 95 x32
  Binary   : 32-bit
  Segments : cs=0x1B ds=0x23 es=0x23
  Segments : fs=0x38 gs=0x00 ss=0x23

  Stack Ptr: 0x0022FEF4
  Syscall E: 0x00000000
  
  ; --------------------------------
  OS       : Windows 7 x32
  Binary   : 32-bit
  Segments : cs=0x1B ds=0x23 es=0x23
  Segments : fs=0x3B gs=0x00 ss=0x23

  Stack Ptr: 0x0022FEC4
  Syscall E: 0x00000000
  
  ; --------------------------------

  OS       : Windows 7 x64
  Binary   : 32-bit
  Segments : cs=0x23 ds=0x2B es=0x2B
  Segments : fs=0x53 gs=0x2B ss=0x2B

  Stack Ptr: 0x0030FCF4
  Syscall E: 0x00000000

  ; --------------------------------

  OS       : Windows 7 x64
  Binary   : 64-bit
  Segments : cs=0x33 ds=0x2B es=0x2B
  Segments : fs=0x53 gs=0x2B ss=0x2B

  Stack Ptr: 0x00000000001FFCB8
  Syscall E: 0xFFFFFFFFC0000005

  ; --------------------------------
  
  OS       : Windows 10 x64
  Binary   : 32-bit
  Segments : cs=0x23 ds=0x2B es=0x2B
  Segments : fs=0x53 gs=0x2B ss=0x2B

  Stack Ptr: 0x0018FB50
  Syscall E: 0x00000000
  
  ; --------------------------------
  
  OS       : Windows 10 x64
  Binary   : 64-bit
  Segments : cs=0x33 ds=0x2B es=0x2B
  Segments : fs=0x53 gs=0x2B ss=0x2B

  Stack Ptr: 0x000000000014FD88
  Syscall E: 0x00000000C0000008

  ; --------------------------------
  
  OS       : OpenBSD x32
  Binary   : 32-bit
  Segments : cs=0x2B ds=0x33 es=0x33
  Segments : fs=0x5B gs=0x63 ss=0x33

  Stack Ptr: 0xcf7c0014
  Syscall E: 0x9

  ; --------------------------------
  OS       : OpenBSD x64
  Binary   : 64-bit
  Segments : cs=0x2B ds=0x23 es=0x23
  Segments : fs=0x23 gs=0x23 ss=0x23

  Stack Ptr: 0x00007f7f fffe0238
  Syscall E: 0x9

  ; --------------------------------

  OS       : Linux x32
  Binary   : 32-bit
  Segments : cs=0x73 ds=0x7B es=0x7B
  Segments : fs=0x00 gs=0x33 ss=0x7B

  Stack Ptr: 0xbf876154
  Syscall E: 0xfffffff7

  ; --------------------------------
  
  OS       : Linux x64
  Binary   : 32-bit
  Segments : cs=0x23 ds=0x2B es=0x2B
  Segments : fs=0x00 gs=0x63 ss=0x2B

  Stack Ptr: 0xffd281c4
  Syscall E: 0xfffffff7

  ; --------------------------------

  OS       : Linux x64
  Binary   : 64-bit
  Segments : cs=0x33 ds=0x00 es=0x00
  Segments : fs=0x00 gs=0x00 ss=0x2B

  Stack Ptr: 0x00007ffc 79c61b68
  Syscall E: 0xfffffffffffffff2

  ; --------------------------------
  
  OS       : FreeBSD x32
  Binary   : 32-bit
  Segments : cs=0x33 ds=0x3B es=0x3B
  Segments : fs=0x3B gs=0x1B ss=0x3B

  Stack Ptr: 0xbfbfecc4
  Syscall E: 0x9
  
  ; --------------------------------
  
  OS       : FreeBSD x64
  Binary   : 64-bit
  Segments : cs=0x43 ds=0x3B es=0x3B
  Segments : fs=0x13 gs=0x1B ss=0x3B

  Stack Ptr: 0x00007fff ffffe8a8
  Syscall E: 0x9

  ; --------------------------------
  
  OS       : OSX x64
  Binary   : 32-bit 
  Segments : cs=0x1B ds=0x23 es=0x23 
  Segments : fs=0x00 gs=0x0F ss=0x23
  
  Stack Ptr: 0xbff9f954 
  Syscall E: 0x9
  
  ; --------------------------------
  
  OS       : OSX x64 
  Binary   : 64-bit 
  Segments : cs=0x2B ds=0x00 es=0x00 
  Segments : fs=0x00 gs=0x00 ss=0x23 
  
  Stack Ptr: 0x00007fff 5777b908 
  Syscall E: 0x6

  ; --------------------------------
  
  OS       : Solaris x32 
  Binary   : 32-bit 
  Segments : cs=0x43 ds=0x4B es=0x4B 
  Segments : fs=0x00 gs=0x1c3 ss=0x4B 
  
  Stack Ptr: 0xfeffed54 
  Syscall E: 0x9
  